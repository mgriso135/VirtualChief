@model IEnumerable<KIS.Areas.Quality.Controllers.NonCompliancesAnalysisController.CauseCost>

@if (ViewBag.authenticated)
{
    if (Model != null)
    {
        if (Model.Count() > 0)
        {

            var lista2 = Model
                .Select(x => new { XAxys = x.CauseName, YAxys = Math.Round(x.risk2, 2) })
                .OrderByDescending(x => x.YAxys)
                .ToList();

            var ChartTitle = ResAnalysis.CausesRiskGraph.lblChartTitle;
            var vWidth = lista2.Count < 10 ? 600 : 100 + 50 * lista2.Count;

            var CustomTheme = "<Chart> "
+ "<ChartAreas>"
+ "  <ChartArea Name=\"Default1\" _Template_=\"All\">"
+ "     <AxisY>"
+ "       <LabelStyle Font=\"Verdana, 12px\" />"
+ "   </AxisY>"
+ "   <AxisX LineColor = \"64, 64, 64, 64\" Interval = \"1\">"
+ "       <LabelStyle Font = \"Verdana, 12px\" />"
+ "   </AxisX>"
+ "   </ChartArea>"
+ " </ChartAreas>"
+ "<Series>"
+ "<Series IsValueShownAsLabel=\"true\" Name = \"DefaultParetoCause\" BorderWidth=\"3\" >"
+ " </Series>"
+ " </Series>"
+ "<Legends>"
+ "  <Legend />"
+ "  </Legends>"
+ " </Chart>";

            var myChart = new Chart(width: vWidth, height: 400, theme: CustomTheme)
            .AddTitle(ChartTitle);

            myChart.AddSeries("DefaultParetoCause", chartType: "column",
        xValue: lista2, xField: "XAxys",
        yValues: lista2, yFields: "YAxys", markerStep: 1
        );
            myChart.Write();

        }
        else
        {
        }
    }
}
