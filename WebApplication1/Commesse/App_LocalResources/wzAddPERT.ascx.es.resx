<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ddlSelProdotto" xml:space="preserve">
    <value>Seleccionar un producto</value>
  </data>
  <data name="lblAccAggiungiProdCopia.Text" xml:space="preserve">
    <value>Añadir nuevo producto copiando un producto existente</value>
  </data>
  <data name="lblAccAggiungiProdotto.Text" xml:space="preserve">
    <value>Añadir nuevo producto</value>
  </data>
  <data name="lblAccProdStandard.Text" xml:space="preserve">
    <value>Añadir un producto estándar.</value>
  </data>
  <data name="lblCliente" xml:space="preserve">
    <value>Cliente</value>
  </data>
  <data name="lblCopiaPostazioni.Text" xml:space="preserve">
    <value>Copiar las estaciones asignadas a las tareas</value>
  </data>
  <data name="lblCopiaReparti.Text" xml:space="preserve">
    <value>Copiar los departamentos asignados al producto</value>
  </data>
  <data name="lblCopiaTempiCiclo.Text" xml:space="preserve">
    <value>Copiar los tiempos de ciclo</value>
  </data>
  <data name="lblDescNuovoProd.Text" xml:space="preserve">
    <value>Descripción del nuevo producto</value>
  </data>
  <data name="lblErr" xml:space="preserve">
    <value>Ocurrió un error</value>
  </data>
  <data name="lblErrAddingProduct" xml:space="preserve">
    <value>Hubo un error al añadir el nuevo producto.</value>
  </data>
  <data name="lblErrNoProdSelected" xml:space="preserve">
    <value>Error: primero se debe seleccionar un producto.</value>
  </data>
  <data name="lblErrOrdineNotFound" xml:space="preserve">
    <value>Advertencia: orden no encontrado.</value>
  </data>
  <data name="lblErrorDuplicate.Text" xml:space="preserve">
    <value>Advertencia: ya existe un producto del mismo nombre. &lt;br /&gt;Se recomienda utilizar el cuadro &lt;i&gt; Añadir producto estándar. &lt;/ i&gt;&lt;br /&gt;¿Seguro que desea continuar?</value>
  </data>
  <data name="lblErrPartialCopy" xml:space="preserve">
    <value>Advertencia: Se ha producido un error. El producto puede haber sido copiado parcialmente. Recargar la página y probar completamente el producto creado.</value>
  </data>
  <data name="lblErrPostRep" xml:space="preserve">
    <value>Error: Si copio las estaciones, tengo que copiar los departamentos tambien.</value>
  </data>
  <data name="lblErrProdStdInesistente" xml:space="preserve">
    <value>Advertencia: el producto solicitado no existe.</value>
  </data>
  <data name="lblErrQta" xml:space="preserve">
    <value>Advertencia: compruebe que la cantidad introducida no es correcta.</value>
  </data>
  <data name="lblFiltraCliente.Text" xml:space="preserve">
    <value>Filtrar por cliente</value>
  </data>
  <data name="lblNomeNuovoProd.Text" xml:space="preserve">
    <value>Nombre del nuevo producto</value>
  </data>
  <data name="lblNoSelection" xml:space="preserve">
    <value>Ninguna seleccion</value>
  </data>
  <data name="lblPermessoKo" xml:space="preserve">
    <value>No se le permite añadir gráficos PERT. &lt;br /&gt;</value>
  </data>
  <data name="lblQuantita.Text" xml:space="preserve">
    <value>Cantidad</value>
  </data>
  <data name="lblRiutilizzaTasks.Text" xml:space="preserve">
    <value>Utilizar las tareas existentes</value>
  </data>
  <data name="lblSelBaseProd.Text" xml:space="preserve">
    <value>Seleccionar un producto básico</value>
  </data>
  <data name="lblSelezionaProdotto.Text" xml:space="preserve">
    <value>Seleccionar un producto</value>
  </data>
  <data name="lblTTAddNuovoProdottoVuoto" xml:space="preserve">
    <value>Añadir un nuevo producto</value>
  </data>
  <data name="lblTTAddProdottoEsistente" xml:space="preserve">
    <value>Añadir un producto existente</value>
  </data>
  <data name="valReqField" xml:space="preserve">
    <value>* Campo obligatorio</value>
  </data>
  <data name="lblMatricola" xml:space="preserve">
    <value>Matricúla / Numero de lote</value>
  </data>
</root>