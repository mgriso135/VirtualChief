@model IEnumerable<KIS.App_Sources.ProductionAnalysisResultStruct>
@if (ViewBag.authR && Model != null && Model.Count() > 0)
{
    int periodType = 0;
    try
    {
        periodType = Int32.Parse(ViewBag.periodType.ToString());
    }
    catch
    {
        periodType = 0;
    }

    Boolean groupProducts = true;
    try
    {
        groupProducts = (Boolean)ViewBag.groupProducts;
    }
    catch
    {
        groupProducts = false;
    }
    int graphType = 0;
    try
    {
        graphType = Int32.Parse(ViewBag.graphType.ToString());
    }
    catch
    {
        graphType = 0;
    }
    DateTime startPeriod = new DateTime(1970, 1, 1);
    DateTime endPeriod = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
    try
    {
        startPeriod = (DateTime)ViewBag.startPeriod;
        endPeriod = (DateTime)ViewBag.endPeriod;
    }
    catch
    {

    }

    if (groupProducts)
    {
<script type="text/javascript">
            google.charts.load('current', { 'packages': ['bar'] });
            google.charts.setOnLoadCallback(drawChartGroupProducts);

            function drawChartGroupProducts() {
                /*var data = new google.visualization.DataTable();/* google.visualization.arrayToDataTable([
                    ['Year', 'Sales', 'Expenses', 'Profit'],
                    ['2014', 1000, 400, 200],
                    ['2015', 1170, 460, 250],
                    ['2016', 660, 1120, 300],
                    ['2017', 1030, 540, 350]
                ]);*/

                var data = google.visualization.arrayToDataTable([
                    @switch (graphType)
                    {
                        case 0:
                            @Html.Raw("['" + ResProductAnalysis.ProductPanel.lblPeriod + "', '" + ResProductAnalysis.ProductPanel.lblQuantity.ToString().Replace(',', '.') + "'],");
                            break;
                        case 1:
                            @Html.Raw("['" + ResProductAnalysis.ProductPanel.lblPeriod + "', '" + ResProductAnalysis.ProductPanel.lblWorkingTime.ToString().Replace(',', '.') + "'],");
                            break;
                        case 2:
                            @Html.Raw("['" + ResProductAnalysis.ProductPanel.lblPeriod + "', '" + ResProductAnalysis.ProductPanel.lblUnitaryWorkingTime.ToString().Replace(',', '.') + "'],");
                            break;
                        case 3:
                            @Html.Raw("['" + ResProductAnalysis.ProductPanel.lblPeriod + "', '" + ResProductAnalysis.ProductPanel.lblMeanLeadTime.ToString().Replace(',', '.') + "'],");
                            break;
                        case 4:
                            @Html.Raw("['" + ResProductAnalysis.ProductPanel.lblPeriod + "', '" + ResProductAnalysis.ProductPanel.lblDelays.ToString().Replace(',', '.') + "'],");
                            break;
                        case 5: @Html.Raw("['" + ResProductAnalysis.ProductPanel.lblPeriod + "', '" + ResProductAnalysis.Index.lblProductivity.ToString().Replace(',', '.') + "'],");
                            break;
                    }

                    @if (periodType == 0)
                    {
                        switch (graphType)
                        {
                            case 0:
                                foreach (var row in Model) // Quantity
                                {
                                    @Html.Raw("['" + row.Day + "/" + row.Month + "/" + row.Year + "'" + ", " + row.Quantity.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 1:
                                foreach (var row in Model) // Working hours
                                {
                                            @Html.Raw("['" + row.Day + "/" + row.Month + "/" + row.Year + "'" + ", " + row.WorkingTime.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 2:
                                foreach (var row in Model) // Working hours per product unit
                                {
                                            @Html.Raw("['" + row.Day + "/" + row.Month + "/" + row.Year + "'" + ", " + row.UnitaryWorkingTime.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 3:
                                foreach (var row in Model) // Mean Lead time
                                {
                                            @Html.Raw("['" + row.Day + "/" + row.Month + "/" + row.Year + "', " + row.LeadTime.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 4:
                                foreach (var row in Model) // Sum of Delays
                                {
                                            @Html.Raw("['" + row.Day + "/" + row.Month + "/" + row.Year + "'" + ", " + row.Delay.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                                case 5:
                                foreach (var row in Model) // Sum of Delays
                                {
                                            @Html.Raw("['" + row.Day + "/" + row.Month + "/" + row.Year + "'" + ", " + ((double)row.Productivity * 100).ToString().Replace(',', '.') + "], ");
                                }
                                break;
                        }

                    }
                    else if (periodType == 1) // WEEKS
                    {
                        switch (graphType)
                        {
                            case 0:
                                foreach (var row in Model) // Quantity
                                {
                                            @Html.Raw("['" + row.Week + "/" + row.Year + "'" + ", " + row.Quantity.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 1:
                                foreach (var row in Model) // Working hours
                                {
                                            @Html.Raw("['" + row.Week + "/" + row.Year + "'" + ", " + row.WorkingTime.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 2:
                                foreach (var row in Model) // Working hours per product unit
                                {
                                            @Html.Raw("['" + row.Week + "/" + row.Year + "'" + ", " + row.UnitaryWorkingTime.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 3:
                                foreach (var row in Model) // Mean Lead time
                                {
                                            @Html.Raw("['" + row.Week + "/" + row.Year + "'" + ", " + row.LeadTime.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 4:
                                foreach (var row in Model) // Sum of Delays
                                {
                                            @Html.Raw("['" + row.Week + "/" + row.Year + "'" + ", " + row.Delay.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                                case 5:
                                foreach (var row in Model) // Sum of Delays
                                {
                                            @Html.Raw("['" + row.Week + "/" + row.Year + "'" + ", " + ((double)row.Productivity * 100).ToString().Replace(',', '.') + "], ");
                                }
                                break;
                        }
                    }
                    else if (periodType == 2)
                    {
                        switch (graphType)
                        {
                            case 0:
                                foreach (var row in Model) // Quantity
                                {
                                            @Html.Raw("['" + row.Month + "/" + row.Year + "'" + ", " + row.Quantity.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 1:
                                foreach (var row in Model) // Working hours
                                {
                                            @Html.Raw("['" + row.Month + "/" + row.Year + "'" + ", " + row.WorkingTime.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 2:
                                foreach (var row in Model) // Working hours per product unit
                                {
                                            @Html.Raw("['" + row.Month + "/" + row.Year + "'" + ", " + row.UnitaryWorkingTime.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 3:
                                foreach (var row in Model) // Mean Lead time
                                {
                                            @Html.Raw("['" + row.Month + "/" + row.Year + "'" + ", " + row.LeadTime.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                            case 4:
                                foreach (var row in Model) // Sum of Delays
                                {
                                            @Html.Raw("['" + row.Month + "/" + row.Year + "'" + ", " + row.Delay.ToString().Replace(',', '.') + "], ");
                                }
                                break;
                                case 5:
                                foreach (var row in Model) // Sum of Delays
                                {
                                            @Html.Raw("['" + row.Month + "/" + row.Year + "'" + ", " + ((double)row.Productivity * 100).ToString().Replace(',', '.') + "], ");
                                }
                                break;
                        }

                    }

                ]);



                            var options = {
                    chart: {
                                title: '@ResProductAnalysis.ProductPanel.lblChartTitle',
                        subtitle: '@ResProductAnalysis.ProductPanel.lblChartSubTitle' + ': @startPeriod.ToString("dd/MM/yyyy") - @endPeriod.ToString("dd/MM/yyyy")',
                    },
                    bars: 'horizontal' // Required for Material Bar Charts.
                };

                        var chart = new google.charts.Bar(document.getElementById('barchart_material'));

                        chart.draw(data, google.charts.Bar.convertOptions(options));
                    }
</script>
    }
    else
    {
        <div></div>
            <script type="text/javascript">
            google.charts.load('current', { 'packages': ['line'] });
            google.charts.setOnLoadCallback(drawChart);

            function drawChart() {

                var data = new google.visualization.DataTable();                    
                 @Html.Raw(ViewBag.ProductsFilter);
                

                var options = {
                    chart: {
                            title: '@ResProductAnalysis.ProductPanel.lblChartTitle',
                        subtitle: '@ResProductAnalysis.ProductPanel.lblChartSubTitle' + ': @startPeriod.ToString("dd/MM/yyyy") - @endPeriod.ToString("dd/MM/yyyy")',
                        
                        },
                    //width: 500,
                    height: 500,                 
                    legend: { position: "bottom", alignment: 'start' }
                    };

                    var chart = new google.charts.Line(document.getElementById('barchart_material'));

                    chart.draw(data, google.charts.Line.convertOptions(options));
                }
        </script>
    }


    <div id="barchart_material" style="width: 900px; height: 500px;"></div>



    <table class="table table-hover table-striped table-condensed" width="100%">
        <thead>
            <tr>
                @if (periodType == 0)
                {
                    <th>@ResProductAnalysis.ProductPanel.lblEndProductionDate</th>
                }
                @if (periodType == 1)
                {
                    <th>@ResProductAnalysis.ProductPanel.lblWeek/@ResProductAnalysis.ProductPanel.lblYear</th>
                }
                @if (periodType == 2)
                {
                    <th>@ResProductAnalysis.ProductPanel.lblMonth/@ResProductAnalysis.ProductPanel.lblYear</th>
                }
                @if (!groupProducts)
                {
                    <th>@ResProductAnalysis.ProductPanel.ResProductName</th>
                }
                <th>@ResProductAnalysis.ProductPanel.lblQuantity</th>
                <th>@ResProductAnalysis.ProductPanel.lblWorkingTime</th>
                <th>@ResProductAnalysis.ProductPanel.lblUnitaryWorkingTime</th>
                <th>@ResProductAnalysis.ProductPanel.lblMeanLeadTime</th>
                <th>@ResProductAnalysis.ProductPanel.lblDelays</th>
                <th>@ResProductAnalysis.Index.lblProductivity</th>

            </tr>
        </thead>
        <tbody>
            @{
                double Quantity = 0.0;
                double WorkingTime = 0.0;
                double UnitaryWorkingTime = 0.0;
                double LeadTime = 0.0;
                double Delay = 0.0;
                double Productivity = 0.0;

                foreach (var m in Model)
                {
                    <tr id="row_@m.Month;@m.Year">
                        @if (periodType == 0)
                        {
                            <td>@m.Day/@m.Month/@m.Year</td>
                        }
                    @if (periodType == 1)
                        {
                            <td>@m.Week/@m.Year</td>
                        }
                    @if (periodType == 2)
                        {
                            <td>@m.Month/@m.Year</td>
                        }
                    @if (!groupProducts)
                        {
                            <td>@m.ProductTypeName&nbsp;-&nbsp;@m.ProductName</td>
                        }
                        <td>@m.Quantity</td>
                        <td>@Math.Round(m.WorkingTime, 2)</td>
                        <td>@Math.Round(m.UnitaryWorkingTime, 2)</td>
                        <td>@Math.Round(m.LeadTime, 2)</td>
                        <td>@Math.Round(m.Delay, 2)</td>
                        <td>@Math.Round(100*m.Productivity, 2)%</td>
                    </tr>

                    Quantity += m.Quantity;
                    WorkingTime += m.WorkingTime;
                    UnitaryWorkingTime += m.UnitaryWorkingTime;
                    LeadTime += m.LeadTime;
                    Delay += m.Delay;
                    Productivity += m.Productivity;
                }
            }
        </tbody>
        <tfoot>
            <tr>
                <td></td>
                @if (!groupProducts)
                {
                    <td></td>
                }
                <td><b>@Quantity</b></td>
                <td><b>@Math.Round(WorkingTime, 2)</b></td>
                <td><b>@Math.Round(UnitaryWorkingTime / Model.Count(), 2)</b></td>
                <td><b>@Math.Round(LeadTime / Model.Count(), 2)</b></td>
                <td><b>@Math.Round(Delay / Model.Count(), 2)</b></td>
                <td><b>@Math.Round(100*Productivity / Model.Count(), 2)%</b></td>
            </tr>
        </tfoot>
    </table>
}