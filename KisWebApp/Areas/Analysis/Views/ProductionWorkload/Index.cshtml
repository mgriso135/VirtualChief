
@{
    ViewBag.Title = ResProductionWorkload.Index.lblTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@{
    ViewBag.Title = ResProductionWorkload.Index.lblTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>@ResProductionWorkload.Index.lblTitle</h3>
<ul class="breadcrumb hidden-phone">
    <li>
        <a href="~/Analysis/analysis.aspx">@ResProductionWorkload.Index.lblAnalysis</a>
        <span class="divider">/</span>
    </li>
    <li>
        <a href="@Request.RawUrl">@ResProductionWorkload.Index.lblTitle</a>
        <span class="divider">/</span>
    </li>
</ul>
@if (ViewBag.authR)
{
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
               $(document).ready(function () {
                   var CustomersArr = [];
                   var DepartmentsArr = [];
                   var WorkstationsArr = [];
                   var TypeOfProductsArr = [];
                   var groupByPeriod = 1;
                   var entityType = "Departments";

                $(function () {
                    $("[id*=txtEndDateStart]").datepicker({ dateFormat: 'dd/mm/yy' })
                });

                $(function () {
                    $("[id*=txtEndDateEnd]").datepicker({ dateFormat: 'dd/mm/yy' })
                });


                var enddate = new Date();
                var enddateStr = enddate.getDate() + "/"
                    + (enddate.getMonth()+1) + "/"
                    + enddate.getFullYear();
                $("#txtEndDateEnd").val(enddateStr);

                var startdate = new Date();
                startdate.setMonth(startdate.getMonth() - 1);
                var startdateStr = startdate.getDate() + "/"
                    + (startdate.getMonth() + 1) + "/"
                    + startdate.getFullYear();

                $("#txtEndDateStart").val(startdateStr);

                $("#txtEndDateStart").bind("propertychange change keyup paste input", function () {
                // load the page
                    var endPDateS = $('#txtEndDateStart').val();
                    var endPDateA = endPDateS.split('/');
                        startdate = new Date(endPDateA[2], endPDateA[1] - 1, endPDateA[0]);
                    if (startdate) {
                        loadPanel();
                    }
                    else {
                        alert("Invalid date");
                    }
                });

                $("#txtEndDateEnd").bind("propertychange change keyup paste input", function () {
                    // load the page
                        var endPDateS = $('#txtEndDateEnd').val();
                        var endPDateA = endPDateS.split('/');
                        enddate = new Date(endPDateA[2], endPDateA[1] - 1, endPDateA[0]);
                    if (enddate) {
                        loadPanel();
                    }
                    else {
                        alert("Invalid date");
                    }
                });



                function loadPanel() {
                    $("#HistoricPanel").fadeTo(0, 0.5);
                    $("#txtEndDateStart").prop("disabled", true);
                    $("#txtEndDateEnd").prop("disabled", true);

                    var startPeriod = startdate.getFullYear() + "-" +
                        (startdate.getMonth() + 1) + "-" + startdate.getDate();
                    var endPeriod = enddate.getFullYear() + "-" +
                        (enddate.getMonth() + 1) + "-" + enddate.getDate();

                    var jsonData = {
                        "StartPeriod": startPeriod, "EndPeriod": endPeriod, "Customer": {}};

                    var customersStr = "";
                    for (i = 0; i < CustomersArr.length; i++) {
                        customersStr += " " + CustomersArr[i];
                    }

                    var departmentsStr = "";
                    for (i = 0; i < DepartmentsArr.length; i++) {
                        departmentsStr += DepartmentsArr[i] + ";";
                    }

                    var workstationsStr = "";
                    for (i = 0; i < WorkstationsArr.length; i++) {
                        workstationsStr += WorkstationsArr[i] + ";";
                    }
                    console.log("Workstations: " + workstationsStr);

                    var TypeOfProductsStr = "";
                    for (i = 0; i < TypeOfProductsArr.length; i++) {
                        TypeOfProductsStr += TypeOfProductsArr[i][0] + "_"
                            + TypeOfProductsArr[i][1]
                            + "_" + TypeOfProductsArr[i][2]
                            + ";";
                    }

                    $.ajax({
                        url: "@Url.Action("ProductDataPanel", "ProductionWorkload")",
                        type: 'POST',
                        dataType: "html",
                        data: {
                            startPeriod: startPeriod,
                            endPeriod: endPeriod,
                            DepartmentsOrWorkstations: entityType,
                            customers: customersStr,
                            departments: departmentsStr,
                            TypeOfProducts: TypeOfProductsStr,
                            periodType: groupByPeriod,
                            workstations: workstationsStr
                        },
                        success: function (result) {
                            console.log(groupByPeriod + "\n"+result);
                            var res = JSON.parse(result);
                            var res2 = [];
                            if (res.length > 0) {

                                if (groupByPeriod == 0) {
                                    // None. It only shows 1 vertical bar for each department

                                    var curr = [];
                                    curr[0] = "Reparto";
                                    curr[1] = "Workload (hours)";
                                    res2.push(curr);
                                    for (var k = 0; k < res[0].EntityWorkload.length; k++) {
                                        curr = [];
                                        curr[0] = res[0].EntityWorkload[k].EntityName;
                                        curr[1] = res[0].EntityWorkload[k].Workload;
                                        res2.push(curr);
                                    }
                                }
                                else if (groupByPeriod == 1) {
                                    // Weekly
                                    var header = [];
                                    header[0] = "date";
                                    for (var i = 0; i < res[0].EntityWorkload.length; i++) {
                                        header[i + 1] = res[0].EntityWorkload[i].EntityName;
                                    }

                                    res2.push(header);

                                    for (var i = 0; i < res.length; i++) {
                                        var curr = [];
                                        curr[0] = res[i].DateStr;
                                        for (var j = 1; j < header.length; j++) {
                                            var found = 0;
                                            for (var k = 0; k < res[i].EntityWorkload.length && found == 0; k++) {
                                                if (res[i].EntityWorkload[k].EntityName == header[j]) {
                                                    curr[j] = res[i].EntityWorkload[k].Workload;
                                                    found = 1;
                                                }
                                            }
                                        }
                                        res2.push(curr);
                                    }
                                }
                                else if (groupByPeriod == 2) {
                                    // Monthly
                                    var header = [];
                                    header[0] = "date";
                                    for (var i = 0; i < res[0].EntityWorkload.length; i++) {
                                        header[i + 1] = res[0].EntityWorkload[i].EntityName;
                                    }
                                    console.log("Header: " + header);
                                    res2.push(header);

                                    for (var i = 0; i < res.length; i++) {
                                        var curr = [];
                                        console.log(moment(res[i].DateStr, "YYYY-MM-DD") + "\n");
                                        curr[0] = moment(res[i].DateStr, "YYYY-MM-DD").format("MM/YYYY");
                                        for (var j = 1; j < header.length; j++) {
                                            var found = 0;
                                            for (var k = 0; k < res[i].EntityWorkload.length && found == 0; k++) {
                                                if (res[i].EntityWorkload[k].EntityName == header[j]) {
                                                    curr[j] = res[i].EntityWorkload[k].Workload;
                                                    found = 1;
                                                }
                                            }
                                        }
                                        res2.push(curr);
                                    }

                                }
                                else if (groupByPeriod == 3) {
                                    // Daily
                                    var header = [];
                                    header[0] = "date";
                                    for (var i = 0; i < res[0].EntityWorkload.length; i++) {
                                        header[i + 1] = res[0].EntityWorkload[i].EntityName;
                                    }
                                    console.log("Header: " + header);
                                    res2.push(header);

                                    for (var i = 0; i < res.length; i++) {
                                        var curr = [];
                                        console.log(moment(res[i].DateStr, "YYYY-MM-DD") + "\n");
                                        curr[0] = moment(res[i].DateStr, "YYYY-MM-DD").format("DD/MM/YYYY");
                                        for (var j = 1; j < header.length; j++) {
                                            var found = 0;
                                            for (var k = 0; k < res[i].EntityWorkload.length && found == 0; k++) {
                                                if (res[i].EntityWorkload[k].EntityName == header[j]) {
                                                    curr[j] = res[i].EntityWorkload[k].Workload;
                                                    found = 1;
                                                }
                                            }
                                        }
                                        res2.push(curr);
                                    }
                                }

                                $("#HistoricPanel").html("");
                                if (res2.length > 0) {
                                    var tblResults = "<table class='table table-striped table-hover'>";
                                    tblResults += "<tr>";
                                    for (var j = 0; j < res2[0].length; j++) {
                                        tblResults += "<th>" + res2[0][j] + "</th>";
                                    }
                                    tblResults += "</tr>";

                                    for (var i = 1; i < res2.length; i++) {
                                    console.log(res2[i]);

                                        tblResults += "<tr>";
                                        tblResults += "<td>" + res2[i][0] + "</td>";
                                    for (var j = 1; j < res2[i].length; j++) {
                                        tblResults += "<td>" + Math.round(parseFloat(res2[i][j])*100, 2)/100 + "</td>";
                                    }
                                    tblResults += "</tr>";
                                }
                                tblResults += "</table>";
                                    $("#HistoricPanel").html(tblResults);
                                }
                                console.log("res2: " + res2);
                                
                                $("#HistoricPanel").fadeTo(0, 1);
                                $("#txtEndDateStart").prop("disabled", false);
                                $("#txtEndDateEnd").prop("disabled", false);
                                drawGoogleChart(res2);
                            }
                            else {
                                console.log("No data!");
                            }
                    },
                    error: function (result) {
                        alert("Error");
                        $("#HistoricPanel").fadeTo(0, 1);
                        $("#txtEndDateStart").prop("disabled", false);
                        $("#txtEndDateEnd").prop("disabled", false);
                        //$("#frmListWorkstations").html("Error");
                    },
                    warning: function (result) {
                        alert("Warning");
                        $("#HistoricPanel").fadeTo(0, 1);
                        $("#txtEndDateStart").prop("disabled", false);
                        $("#txtEndDateEnd").prop("disabled", false);
                        //$("#frmListWorkstations").html("Warning");
                    }
                });
                   }


                       google.charts.load('current', { 'packages': ['bar'] });
                   google.charts.setOnLoadCallback(drawGoogleChart);

            function drawGoogleChart(graphData) {
                /*var data = new google.visualization.DataTable();/* google.visualization.arrayToDataTable([
                    ['Year', 'Sales', 'Expenses', 'Profit'],
                    ['2014', 1000, 400, 200],
                    ['2015', 1170, 460, 250],
                    ['2016', 660, 1120, 300],
                    ['2017', 1030, 540, 350]
                ]);*/

                //console.log(JSON.stringify(graphData));

                var data = google.visualization.arrayToDataTable(graphData);

                            var options = {
                    chart: {
                                title: '@ResProductionWorkload.Index.lblChartTitle',
                        subtitle: '@ResProductionWorkload.Index.lblChartSubTitle' + ': ' + $("#txtEndDateStart").val() + ' - ' + $("#txtEndDateEnd").val(),
                    },
                    bars: 'vertical' // Required for Material Bar Charts.
                };

                        var chart = new google.charts.Bar(document.getElementById('barchart_material'));
                        chart.draw(data, google.charts.Bar.convertOptions(options));
                    }

                   $("#collapseCustomers :checkbox").each(function () {
                       var badgeOrig = $(this).attr('id').split('_');
                       var cst = badgeOrig[1];
                       CustomersArr.push(cst);
                   });

                   $("#collapseCustomers :checkbox").change(function () {
                       var badgeOrig = $(this).attr('id').split('_');
                       var id = badgeOrig[1];
                       var name = $("#customerName_" + id).text();
                       if ($(this).is(":checked")) {
                           CustomersArr.push(id);
                           loadPanel();
                       }
                       else {
                           var index = $.inArray(id, CustomersArr);
                           if (index >= 0) CustomersArr.splice(index, 1);

                           loadPanel();
                       }
                   });

                   //TypeOfProducts filter
                   //$("#frmProductsList").hide();
                   /*$("#btnShowProductsPanel").click(function () {
                       if ($("#frmProductsList").is(':visible')) {
                           $("#frmProductsList").fadeOut();
                       }
                       else {
                           $("#frmProductsList").fadeIn();
                       }
                   });*/
                   $("#collapseTypeOfProducts :checkbox").each(function () {
                       var badgeOrig = $(this).attr('id').split('_');
                       var badgeOrig2 = badgeOrig[1].split(';');
                       var cst = [badgeOrig2[0], badgeOrig2[1], badgeOrig2[2]];
                       TypeOfProductsArr.push(cst);
                   });

                   $("#collapseTypeOfProducts :checkbox").change(function () {
                       var badgeOrig = $(this).attr('id').split('_');
                       var badgeOrig2 = badgeOrig[1].split(';');
                       var id = badgeOrig[1];
                       var ids = [badgeOrig2[0], badgeOrig2[1], badgeOrig2[2]];
                       //var name = $("#productName_" + id).text();
                       if ($(this).is(":checked")) {
                           TypeOfProductsArr.push(ids);
                       }
                       else {
                           var index = -1;
                           for (var i = 0; i < TypeOfProductsArr.length; i++) {
                               if (TypeOfProductsArr[i][0] == badgeOrig2[0] && TypeOfProductsArr[i][1] == badgeOrig2[1] && TypeOfProductsArr[i][2] == badgeOrig2[2]) {
                                   index = i;
                                   break;
                               }
                           }
                           if (index >= 0) TypeOfProductsArr.splice(index, 1);
                       }
                       loadPanel();
                   });

                   // Departments filter
                   //$("#frmDepartmentsList").hide();
                   /*$("#btnShowDepartmentsPanel").click(function () {
                       if ($("#frmDepartmentsList").is(':visible')) {
                           $("#frmDepartmentsList").fadeOut();
                       }
                       else {
                           $("#frmDepartmentsList").fadeIn();
                       }
                   });*/
                   $("#collapseDepartments :checkbox").each(function () {
                       var badgeOrig = $(this).attr('id').split('_');
                       var cst = badgeOrig[1];
                       DepartmentsArr.push(cst);
                   });
                   $("#collapseDepartments :checkbox").change(function () {
                       var badgeOrig = $(this).attr('id').split('_');
                       var id = badgeOrig[1];
                       var name = $("#departmentName_" + id).text();
                       if ($(this).is(":checked")) {
                           DepartmentsArr.push(id);
                       }
                       else {
                           var index = $.inArray(id, DepartmentsArr);
                           if (index >= 0) DepartmentsArr.splice(index, 1);
                       }
                       loadPanel();
                   });

                   $("#collapseWorkstations :checkbox").each(function () {
                       var badgeOrig = $(this).attr('id').split('_');
                       var cst = badgeOrig[1];
                       WorkstationsArr.push(cst);
                   });
                   $("#collapseWorkstations :checkbox").change(function () {
                       var badgeOrig = $(this).attr('id').split('_');
                       var id = badgeOrig[1];
                       var name = $("#workstationName" + id).text();
                       if ($(this).is(":checked")) {
                           WorkstationsArr.push(id);
                       }
                       else {
                           var index = $.inArray(id, WorkstationsArr);
                           if (index >= 0) WorkstationsArr.splice(index, 1);
                       }
                       loadPanel();
                   });

                   $("#collapsePeriods :radio").change(function () {
                       if ($(this).val() == "0") {
                           groupByPeriod = 0;
                       }
                       else if ($(this).val() == "1") {
                           groupByPeriod = 1;
                       }
                       else if ($(this).val() == "2") {
                           groupByPeriod = 2;
                       }
                       else {
                           groupByPeriod = 3;
                       }
                       loadPanel();
                   });

                   $(".deptorwst").change(function () {
                       if ($(this).val() == "Departments" || $(this).val() == "Workstations") {
                           entityType = $(this).val();
                       }
                       console.log(entityType);
                       loadPanel();
                   });

                   loadPanel();
               });
    </script>

    <div class="container-fluid">
        <div class="row-fluid">
            <div class="span3">
                <div class="well sidebar-nav sidebar-nav-fixed">
                    @ResProductionWorkload.Index.lblFilterSelection
                    <p>
                        <div class="accordion" id="accordionExample">
                            <div class="card">
                                <div class="card-header" id="headingDeptOrWst">
                                    <h5 class="mb-0">
                                        <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseDeptOrWst" aria-expanded="true" aria-controls="collapseDeptOrWst">
                                            @ResProductionWorkload.Index.lblViewEntity
                                        </button>
                                    </h5>
                                </div>

                                <div id="collapseDeptOrWst" class="collapse show card" aria-labelledby="headingOne" data-parent="#accordionExample">
                                    <input type="radio" class="deptorwst" name="deptorwst" value="Departments" checked />@ResProductionWorkload.Index.lblByDepartment<br />
                                    <input type="radio" class="deptorwst" name="deptorwst" value="Workstations" />@ResProductionWorkload.Index.lblByWorkstation
                                </div>
                            </div>
                            <div class="card">
                                <div class="card-header" id="headingDates">
                                    <h5 class="mb-0">
                                        <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseEndProductionDates" aria-expanded="true" aria-controls="collapseEndProductionDates">
                                            @ResProductionWorkload.Index.lblEndProductionDate
                                        </button>
                                    </h5>
                                </div>

                                <div id="collapseEndProductionDates" class="collapse show card" aria-labelledby="headingOne" data-parent="#accordionExample">
                                    @ResProductionWorkload.Index.lblStartDate
                                    <input type="text" id="txtEndDateStart" name="txtEndDateStart" /><br />
                                    @ResProductionWorkload.Index.lblEndDate
                                    <input type="text" id="txtEndDateEnd" name="txtEndDateStart" />
                                </div>
                            </div>
                            <div class="card">
                                <div class="card-header" id="headingPeriods">
                                    <h5 class="mb-0">
                                        <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapsePeriods" aria-expanded="true" aria-controls="collapsePeriods">
                                            @ResProductionWorkload.Index.lblGroupBy
                                        </button>
                                    </h5>
                                </div>

                                <div id="collapsePeriods" class="collapse show card" aria-labelledby="headingPeriods" data-parent="#accordionExample">
                                    <input type="radio" id="rdNone" name="rdGroupByPeriod" value="0" />@ResProductionWorkload.Index.lblNone<br />
                                    <input type="radio" id="rdNone" name="rdGroupByPeriod" value="3" checked />@ResProductionWorkload.Index.lblDaily<br />
                                    <input type="radio" id="rdNone" name="rdGroupByPeriod" value="1" checked />@ResProductionWorkload.Index.lblWeek<br />
                                    <input type="radio" id="rdNone" name="rdGroupByPeriod" value="2" />@ResProductionWorkload.Index.lblMonth<br />
                                </div>
                            </div>
                            <div class="card">
                                <div class="card-header" id="headingTypeOfProduct">
                                    <h5 class="mb-0">
                                        <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseTypeOfProducts" aria-expanded="true" aria-controls="collapseTypeOfProducts">
                                            @ResProductionWorkload.Index.lblTypesOfProducts
                                        </button>
                                    </h5>
                                </div>

                                <div id="collapseTypeOfProducts" class="collapse show" aria-labelledby="headingTypeOfProduct" data-parent="#accordionExample">
                                    <div class="card-body">
                                        <div id="productFilterPanel">

<p></p>
                    @{
                        List<KIS.App_Code.ProcessoVariante> TypeOfProductList = ViewBag.TypeOfProducts;
                        foreach (var prod in TypeOfProductList)
                        {
                            <p>

                                <input class="form-check-input" type="checkbox" id="product_@prod.process.processID;@prod.process.revisione;@prod.variant.idVariante" checked />
                                <literal id="productName_@prod.process.processID;@prod.process.revisione;@prod.variant.idVariante">@Html.Raw(prod.process.processName + " - " + prod.variant.nomeVariante)</literal>
                            </p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-header" id="headingCustomers">
            <h5 class="mb-0">
                <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseCustomers" aria-expanded="true" aria-controls="collapseCustomers">
                    @ResProductionWorkload.Index.lblCustomers
                </button>
            </h5>
        </div>

        <div id="collapseCustomers" class="collapse show" aria-labelledby="headingCustomers" data-parent="#accordionExample">
            <div class="card-body">
                @{
                    List<KIS.App_Code.Cliente> cstList = ViewBag.Customers;
                    foreach (var cst in cstList)
                    {<p>
                            <input type="checkbox" id="customer_@cst.CodiceCliente" checked="checked" /><literal id="customerName_@cst.CodiceCliente">@Html.Raw(cst.RagioneSociale)</literal>
                        </p>
                    }
                }
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-header" id="headingDepartments">
            <h5 class="mb-0">
                <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseDepartments" aria-expanded="true" aria-controls="collapseDepartments">
                    @ResProductionWorkload.Index.lblDepartments
                </button>
            </h5>
        </div>

        <div id="collapseDepartments" class="collapse show" aria-labelledby="headingDepartments" data-parent="#accordionExample">
            <div class="card-body">
                @{
                    List<KIS.App_Code.Reparto> DepartmentList = ViewBag.Departments;
                    foreach (var dept in DepartmentList)
                    {<p>
                            <input type="checkbox" id="department_@dept.id" checked="checked" /><literal id="departmentName_@dept.name">@Html.Raw(dept.name)</literal>
                        </p>
                    }
                }
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header" id="headingWorkstations">
            <h5 class="mb-0">
                <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseWorkstations" aria-expanded="true" aria-controls="collapseWorkstations">
                    @ResProductionWorkload.Index.lblWorkstations
                </button>
            </h5>
        </div>

        <div id="collapseWorkstations" class="collapse show" aria-labelledby="headingWorkstations" data-parent="#accordionExample">
            <div class="card-body">
                @{
                    List<KIS.App_Code.Postazione> WorkstationsList = ViewBag.Workstations;
                    foreach (var wst in WorkstationsList)
                    {<p>
                            <input type="checkbox" id="workstation_@wst.id" checked="checked" /><literal id="workstationName_@wst.name">@Html.Raw(wst.name)</literal>
                        </p>
                    }
                }
            </div>
        </div>
    </div>

    </div>
    </p>
    </div>
    </div>
    <div class="span9">

        <div id="barchart_material" style="width: 900px; height: 500px;"></div>
        <div id="HistoricPanel"></div>
    </div>
    </div>
    </div>
}
else
{
    <div>
        @ResProductionWorkload.Index.lblUserNotAuthorized<br />
        <a href="/login/login.aspx?red=/Analysis/ProductAnalysis/Index">@ResProductionWorkload.Index.lblClickHere</a>
    </div>
}
